BootStrap: docker
From: nvidia/cuda:9.0-devel-centos7


%help
    Container for the software dependencies of Relion 3:
      * OpenMPI
      * CMake
      * FFTW
      * fltk

%labels
    maintainer M. Duta
    version 1.2

%files
    # each line is a pair of <source> (host system path) and <destination> (container path)


#============================================================#
# *** Install the software
#============================================================#

%post
    #
    # --- devel tools
    yum groupinstall -y "Development Tools"
    yum install -y gcc-gfortran wget openssl openssl-devel
    yum install -y libX11 libX11-devel
    yum install -y freetype-devel


    # --- Infiniband
    yum groupinstall -y "Infiniband"
    yum install -y libibverbs-devel


    #
    # --- install OpenMPI
    OPENMPI_VERSION=3.1.4
    wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%??}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
    tar -xf openmpi-${OPENMPI_VERSION}.tar.gz
    cd openmpi-${OPENMPI_VERSION}/
    ./configure \
       --prefix=/usr/local \
       --enable-orterun-prefix-by-default \
       --enable-mpirun-prefix-by-default \
       --with-verbs
    make install
    cd ../ && rm -fr openmpi-${OPENMPI_VERSION}*


    #
    # --- install CMake
    CMAKE_VERSION=3.16.4
    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz
    tar -xf cmake-${CMAKE_VERSION}.tar.gz && cd cmake-${CMAKE_VERSION}
    ./configure --prefix=/usr/local
    gmake
    make install
    cd ../ && rm -fr cmake-${CMAKE_VERSION}*


    #
    # --- install fftw
    FFTW_VERSION=3.3.8
    wget http://www.fftw.org/fftw-${FFTW_VERSION}.tar.gz
    tar -xf fftw-${FFTW_VERSION}.tar.gz  && cd fftw-${FFTW_VERSION}/
    export FFLAGS="-O3 -mavx -mavx2 -fpic -fopenmp"
    export CFLAGS=${FFLAGS}
    export CXXFLAGS=${FFLAGS}
    FFTW_CONFIG_VECTORS_OPTS="--enable-sse2 --enable-avx --enable-avx2"

    # double precision
    ./configure \
        --prefix=/usr/local \
        --enable-shared=yes \
        ${FFTW_CONFIG_VECTORS_OPTS} \
        --enable-fortran=yes \
        --enable-openmp \
        --enable-threads
    make install

    # single precision
    make distclean
    ./configure \
        --prefix=/usr/local \
        --enable-shared=yes \
        ${FFTW_CONFIG_VECTORS_OPTS} \
        --enable-fortran=yes \
        --enable-float \
        --enable-openmp \
        --enable-threads
    make install

    # long double precision
    make distclean
    ./configure \
        --prefix=/usr/local \
        --enable-shared=yes \
        --enable-fortran=yes \
        --enable-openmp \
        --enable-threads \
        --enable-long-double
    make install

    cd ../ && rm -fr fftw-${FFTW_VERSION}*


    #
    # --- install fltk
    FLTK_VERSION=1.3.5
    wget https://www.fltk.org/pub/fltk/${FLTK_VERSION}/fltk-${FLTK_VERSION}-source.tar.gz
    tar -xf fltk-${FLTK_VERSION}-source.tar.gz && cd fltk-${FLTK_VERSION}
    ./configure --prefix=/usr/local
    make install
    cd ../ && rm -fr fltk-${FLTK_VERSION}*


    #
    # --- make libraries /usr/local/lib available
    ldconfig
    ldconfig /usr/local/lib


#============================================================#
# *** Set environment: PATH, LD_LIBRARY_PATH, etc.
#============================================================#

%environment


#============================================================#
# script to run with command "singularity run"
#============================================================#

%runscript


#============================================================#
# scriptlet to run with command "singularity test"
#    if tests need a different environment than that
#    during the building phase (e.g. tests need the
#    environment defined in "%environment"), the image
#    can be built by omitting the test
#       sudo singularity build --notest mpirun.simg Singularity
#============================================================#

%test
    echo " === Minimal installation testing..."
    command -v mpirun --version       >/dev/null 2>&1 && { echo >&2 " OpenMPI: PASSED"; } || { echo >&2 " OpenMPI: ERROR"; }
    command -v cmake --version        >/dev/null 2>&1 && { echo >&2 " CMake:   PASSED"; } || { echo >&2 " CMake:   ERROR"; }
    command -v fftw-wisdom            >/dev/null 2>&1 && { echo >&2 " FFTW:    PASSED"; } || { echo >&2 " FFTW:    ERROR"; }
    command -v fltk-config --version  >/dev/null 2>&1 && { echo >&2 " FLTK:    PASSED"; } || { echo >&2 " FLTK:    ERROR"; }
    echo " === ... finished testing."
